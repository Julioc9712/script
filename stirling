#!/usr/bin/env bash
# Script adaptado para arquitectura ARM64

function header_info {
  clear
  cat <<"EOF"
   _____ __  _      ___                 ____  ____  ______
  / ___// /_(_)____/ (_)___  ____ _    / __ \/ __ \/ ____/
  \__ \/ __/ / ___/ / / __ \/ __ `/___/ /_/ / / / / /_
 ___/ / /_/ / /  / / / / / / /_/ /___/ ____/ /_/ / __/
/____/\__/_/_/  /_/_/_/ /_/\__, /   /_/   /_____/_/
/____/
EOF
}

header_info
echo -e "Loading..."
APP="Stirling-PDF"
var_disk="8"
var_cpu="2"
var_ram="2048"
var_os="debian"
var_version="12"

# Verificar si la arquitectura es ARM64
ARCH=$(dpkg --print-architecture)
if [ "$ARCH" != "arm64" ]; then
    echo "Este script está optimizado para arquitectura ARM64."
    exit 1
fi

# Configuración predeterminada
function default_settings() {
  CT_TYPE="1"
  PW=""
  CT_ID=$NEXTID
  HN="Stirling-PDF"
  DISK_SIZE="$var_disk"
  CORE_COUNT="$var_cpu"
  RAM_SIZE="$var_ram"
  BRG="vmbr0"
  NET="dhcp"
  echo "Configuración predeterminada aplicada."
}

# Actualizar Stirling-PDF
function update_script() {
  header_info
  if [[ ! -d /opt/Stirling-PDF ]]; then 
    echo "No se encontró la instalación de ${APP}. Saliendo..."
    exit 1
  fi

  echo "Actualizando ${APP}..."
  systemctl stop stirlingpdf

  # Obtener la última versión para ARM64
  RELEASE=$(curl -s https://api.github.com/repos/Stirling-Tools/Stirling-PDF/releases/latest | grep "tag_name" | awk '{print substr($2, 3, length($2)-4) }')
  wget -q https://github.com/Stirling-Tools/Stirling-PDF/releases/download/v$RELEASE/Stirling-PDF-$RELEASE-arm64.tar.gz

  # Extraer y actualizar
  tar -xzf Stirling-PDF-$RELEASE-arm64.tar.gz
  cd Stirling-PDF-$RELEASE
  chmod +x ./gradlew
  ./gradlew build &>/dev/null

  # Mover los archivos construidos
  cp -r ./build/libs/Stirling-PDF-*.jar /opt/Stirling-PDF/
  cp -r scripts /opt/Stirling-PDF/
  cd ~
  rm -rf Stirling-PDF-$RELEASE v$RELEASE-arm64.tar.gz

  # Crear enlace simbólico
  ln -sf /opt/Stirling-PDF/Stirling-PDF-$RELEASE.jar /opt/Stirling-PDF/Stirling-PDF.jar
  systemctl start stirlingpdf

  echo "Actualizado ${APP} a la versión v$RELEASE."
  exit 0
}

# Inicializar contenedor
function start_container() {
  echo "Iniciando contenedor de ${APP}..."
  # Aquí debería estar el código para iniciar el contenedor si es necesario
}

# Mostrar la descripción del contenedor o aplicación
function description() {
  echo "${APP} ha sido configurado y está listo para usar."
}

# Llamar a las funciones
default_settings
update_script
start_container
description

echo "Instalación completada con éxito."
echo -e "${APP} debería estar disponible en la siguiente URL:
         http://localhost:8080"
